{"version":3,"sources":["components/table.tsx","utils/constants.tsx","pages/FirstPage.tsx","App.js","serviceWorker.js","index.js"],"names":["Table","props","getData","bind","this","headers","map","header","titleHeader","i","length","concat","toUpperCase","key","data","item","idKey","title","value","className","getHeaders","React","BaseURL","FirstPage","podiumDisplay","state","podium","driver","Object","keys","showWinner","lastRaceName","lastRaceDate","loading","raceWinner","driverStandings","seasonString","roundString","constructorStandings","getRaceData","fetch","Constants","then","res","json","result","raceData","MRData","RaceTable","Races","setState","raceName","date","Results","slice","error","console","log","standingList","StandingsTable","StandingsLists","season","round","DriverStandings","ConstructorStandings","driverStats","Driver","givenName","familyName","Constructor","name","classification","constructorId","getClassName","onClick","getRaceWinner","getStandingsTitle","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.83e583eb.chunk.js","sourcesContent":["import * as React from 'react';\r\n\r\ninterface Props {\r\n    headers: string[],\r\n    data: any,\r\n    title: string\r\n}\r\n\r\n\r\nexport default class Table extends React.Component<Props> {\r\n\r\n    constructor(props: Props){\r\n        super(props);\r\n        this.getData = this.getData.bind(this)\r\n    }\r\n\r\n    getHeaders(){\r\n        return (\r\n            <tr>\r\n                {this.props.headers.map((header) => {\r\n                    var titleHeader = \"\"\r\n                    for (var i = 0; i < header.length; i++){\r\n                        if (i === 0) {\r\n                            titleHeader = titleHeader.concat(header[i].toUpperCase())\r\n                        } else if (header[i] === header[i].toUpperCase()) {\r\n                            titleHeader = titleHeader.concat(\" \")\r\n                            titleHeader = titleHeader.concat(header[i])\r\n                        } else {\r\n                            titleHeader = titleHeader.concat(header[i])\r\n                        }\r\n                    }\r\n                    return <th key={header}>{titleHeader}</th>\r\n                })}\r\n            </tr>\r\n        )\r\n    }\r\n\r\n    getData(){\r\n        return (\r\n        <tbody>\r\n            {this.props.data.map((item: any) => {\r\n                    var idKey = item[\"Driver\"] ? item[\"Driver\"][\"driverId\"] : item[\"Constructor\"][\"constructorId\"]\r\n                    return (<tr key={idKey + this.props.title}> \r\n                        { this.props.headers.map((header: any, value) => {\r\n                            if (header === \"constructor\"){\r\n                                return(<td key={header + idKey + this.props.title}>{item[\"Constructor\"][\"name\"]} </td>)\r\n                            } else if (header === \"driver\"){\r\n                                return(<td key={header + idKey + this.props.title}>{item[\"Driver\"][\"givenName\"]} {item[\"Driver\"][\"familyName\"]}</td>)\r\n                            } else if (header === \"team\") {\r\n                                return(<td key={header + idKey + this.props.title}>{item[\"Constructor\"][\"name\"]}</td>)\r\n                            } else if (header === \"time\"){\r\n                                return(<td key={header + idKey + this.props.title}>{item[\"Time\"][header]}</td>)\r\n                            } else if (header === \"teamName\"){\r\n                                return(<td key={header + idKey + this.props.title}>{item[\"Constructors\"][0][\"name\"]}</td>)\r\n                            } else if (item[header]){\r\n                                return (<td key={header + idKey + this.props.title}>{item[header]}</td>)\r\n                            }\r\n                            return null\r\n                        })}\r\n                        </tr>)\r\n        \r\n                })}\r\n        </tbody>\r\n                \r\n        )\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div >\r\n                <h2>{this.props.title}</h2>\r\n                <table className=\"table\">\r\n                    <thead>\r\n                        {this.getHeaders()}\r\n                    </thead>\r\n                        {this.getData()}\r\n                </table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","export const BaseURL = \"http://ergast.com/api/f1/current/\"\r\nexport const ResultsURLSuffix = \"last/results.json\"\r\nexport const DriverStandingsSuffix = \"driverStandings.json\"\r\nexport const ConstructorStandingsSuffix = \"constructorStandings.json\"\r\nexport const BackgroundColorSplash = \"#282c34\"","\r\nimport * as React from 'react';\r\nimport Table from '../components/table';\r\nimport * as Constants from \"../utils/constants\"\r\n\r\ninterface Props {\r\n    \r\n}\r\n\r\ninterface State {\r\n    showWinner: boolean\r\n    lastRaceName: string,\r\n    lastRaceDate: string,\r\n    podium: any,\r\n    loading: boolean,\r\n    raceWinner: any,\r\n    driverStandings: any,\r\n    seasonString: string,\r\n    roundString: string,\r\n    constructorStandings: any\r\n}\r\n\r\nexport default class FirstPage extends React.PureComponent<Props, State> {\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            showWinner: false,\r\n            lastRaceName: \"\",\r\n            lastRaceDate: \"\",\r\n            podium: [],\r\n            loading: true,\r\n            raceWinner: {},\r\n            driverStandings: {},\r\n            seasonString: \"\",\r\n            roundString: \"\",\r\n            constructorStandings: {}\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getRaceData()\r\n    }\r\n\r\n   getRaceData(){\r\n       fetch(Constants.BaseURL + Constants.ResultsURLSuffix)\r\n          .then(res => res.json())\r\n          .then(\r\n              (result) => {\r\n                  var raceData = result.MRData.RaceTable.Races[0]\r\n                  this.setState({\r\n                      lastRaceName: raceData.raceName,\r\n                      lastRaceDate: raceData.date,\r\n                      podium: raceData.Results.slice(0, 3),\r\n                      loading: false,\r\n                      raceWinner: raceData.Results[0]\r\n                  });\r\n              },\r\n              (error) => {\r\n                  console.log(error)\r\n              }\r\n          )\r\n\r\n        fetch(Constants.BaseURL + Constants.DriverStandingsSuffix)\r\n              .then(res => res.json())\r\n              .then (\r\n                  (result) => {\r\n                      var standingList = result.MRData.StandingsTable.StandingsLists[0]\r\n                      this.setState({\r\n                          seasonString: standingList.season,\r\n                          roundString: standingList.round,\r\n                          driverStandings: standingList.DriverStandings\r\n                      })\r\n                  },\r\n                  (error) => {\r\n                    console.log(error)\r\n                }\r\n              )\r\n\r\n        fetch(Constants.BaseURL + Constants.ConstructorStandingsSuffix)\r\n             .then(res => res.json())\r\n             .then (\r\n                 (result) => {\r\n                     var standingList = result.MRData.StandingsTable.StandingsLists[0]\r\n                     this.setState({\r\n                         constructorStandings: standingList.ConstructorStandings\r\n                     })\r\n                 }\r\n             )\r\n   }\r\n\r\n   podiumDisplay = () => {\r\n       var test = (\r\n       <div>\r\n           {this.state.podium.map((driver: any) => {\r\n            return Object.keys(driver[\"Driver\"]).map((value) => {\r\n               return <p>{driver[\"Driver\"][value]}</p>\r\n            })\r\n       })}\r\n       </div>)\r\n       \r\n       return test\r\n   }\r\n\r\n   getRaceWinner(){\r\n       var driverStats = this.state.raceWinner.Driver\r\n        return(\r\n            <div>\r\n                <h1>{driverStats.givenName} {driverStats.familyName} - {this.state.raceWinner.Constructor.name}</h1>\r\n            </div>\r\n        )       \r\n   }\r\n\r\n   getStandingsTitle(classification: string){\r\n       var titleString = this.state.seasonString + \" \" + classification + \" - Round \" + this.state.roundString\r\n       return titleString\r\n   }\r\n\r\n\r\n   getClassName(){\r\n       return !this.state.showWinner ? \"splashPage\" :  this.state.podium[0].Constructor.constructorId\r\n   }\r\n   \r\n    render() {\r\n        return (\r\n            <div className={this.getClassName()}>\r\n                {this.state.loading ? <h2>Loading</h2> : !this.state.showWinner ? (\r\n                    <div> \r\n                        <h3>Who Won The {this.state.lastRaceName}?</h3>\r\n                        <h3>On {this.state.lastRaceDate}</h3>\r\n                        {!this.state.showWinner ? <button onClick={() => this.setState({showWinner: true})}>Find Out!</button> : null}\r\n\r\n                    </div>\r\n                ) : null   \r\n                }\r\n                {this.state.showWinner ? (\r\n                    <div>\r\n                        <h3>Winner of The {this.state.lastRaceDate.slice(0, 4)} {this.state.lastRaceName}:</h3>\r\n                        <u>{this.getRaceWinner()}</u>\r\n                        <div className=\"row\">\r\n                            <div className=\"col\">\r\n                                <Table title={\"Podium\"} headers={[\"position\", \"driver\", \"team\", \"points\", \"time\"]} data={this.state.podium} />\r\n                            </div>\r\n                            <div className=\"col\">\r\n                                <Table title={this.getStandingsTitle(\"Driver Standings\")} headers={[\"position\", \"driver\", \"teamName\", \"points\", \"wins\"]} data={this.state.driverStandings} />\r\n                            </div>\r\n                            <div className=\"col\">\r\n                                <Table title={this.getStandingsTitle(\"Constructor Standings\")} headers={[\"position\", \"constructor\", \"points\", \"wins\"]} data={this.state.constructorStandings} />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                        ) : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","import React from 'react';\nimport './App.scss';\nimport FirstPage from \"./pages/FirstPage.tsx\";\n\nfunction App() {\n  return (\n        <FirstPage />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}